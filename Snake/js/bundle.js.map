{"version":3,"sources":["webpack/bootstrap 55cd9d73e96346d21b31","./js/main.js","./js/snake-view.js","./js/snake.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;ACtCA;;AAEA;AACA;AACA;AACA,EAAC;;;;;;;ACLD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB,SAAS;AAC1B;AACA;AACA;;AAEA;;AAEA;AACA;AACA,kCAAiC,EAAE;AACnC;AACA,IAAG;AACH;;AAEA;;;;;;;AC5BA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/js/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 55cd9d73e96346d21b31\n **/","const View = require ('./snake-view.js');\n\n$( () => {\n  let $board = $(\".board\");\n  let view = new View($board);\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/main.js\n ** module id = 1\n ** module chunks = 0\n **/","const Board = require ('./snake.js');\nvar View = function ($el) {\n  this.$el = $el;\n  this.board = new Board();\n  this.setupBoard();\n  this.render();\n};\n\nView.prototype.mapCoords = function (coord) {\n  return coord[1] * 20 +  coord[0];\n};\n\nView.prototype.setupBoard = function () {\n  this.$el.append(\"<ul></ul>\");\n  for (var i = 0; i < 400; i++) {\n    this.$el.children().append(\"<li></li>\");\n  }\n};\n\nView.prototype.render = function() {\n\n  this.board.snake.segments.forEach( (el) => {\n    let i = this.mapCoords(el.pos);\n    let $box = $(`li:nth-child(${i})`);\n    $box.css(\"background\",\"black\");\n  });\n};\n\nmodule.exports = View;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/snake-view.js\n ** module id = 2\n ** module chunks = 0\n **/","const DIRECTIONS = ['N','E','S','W'];\nclass Snake  {\n  constructor() {\n    this.direction = \"N\";\n    this.segments = [new Coord( [10,10] ) ];\n\n  }\n\n}\n\nSnake.prototype.turn = function (direction) {\n  let current = DIRECTIONS.indexOf(this.direction);\n  current += 2;\n  current = (current % 4);\n  if(direction === DIRECTIONS[current]) return;\n  this.direction = direction;\n};\n\nSnake.prototype.move = function () {\n  this.segments.unshift(this.segments[0].plus(this.direction));\n  this.segments.pop();\n};\n\n\nclass Coord {\n  constructor(pos) {\n    this.pos = pos;\n  }\n  plus(direction) {\n    switch(direction) {\n      case \"N\":\n        return new Coord([this.pos[0],this.pos[1]--]);\n      case \"S\":\n        return new Coord([this.pos[0],this.pos[1]++]);\n      case \"E\":\n        return new Coord([this.pos[0]++,this.pos[1]]);\n      case \"W\":\n        return new Coord([this.pos[0]--,this.pos[1]]);\n      default:\n        console.log(\"wtf\");\n    }\n  }\n}\n\n\nclass Board {\n  constructor() {\n    this.snake = new Snake;\n    this.apple = this.getRandomCoord();\n   }\n   getRandomCoord() {\n     let x = Math.floor(Math.random() * 20 );\n     let y = Math.floor(Math.random() * 20 );\n     return new Coord([x,y]);\n   }\n}\n\n\nmodule.exports = Board;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/snake.js\n ** module id = 3\n ** module chunks = 0\n **/"],"sourceRoot":""}